/* Marvell ISP S5K3L2 Driver
 *
 * Copyright (C) 2009-2010 Marvell International Ltd.
 *
 * Based on mt9v011 -Micron 1/4-Inch VGA Digital Image S5K3L2
 *
 * Copyright (c) 2009 Mauro Carvalho Chehab (mchehab@redhat.com)
 * This code is placed under the terms of the GNU General Public License v2
 */

#ifndef	B52_S5K3L2_H
#define	B52_S5K3L2_H

#include <media/b52-sensor.h>
#include <media/b52_api.h>
#define OTP_DRV_START_ADDR  0x7220
#define OTP_DRV_INFO_GROUP_COUNT  3
#define OTP_DRV_INFO_SIZE  5
#define OTP_DRV_AWB_GROUP_COUNT 3
#define OTP_DRV_AWB_SIZE  5
#define OTP_DRV_LSC_GROUP_COUNT  3
#define OTP_DRV_LSC_SIZE  62
#define OTP_DRV_LSC_REG_ADDR  0x5200
#define OTP_DRV_VCM_GROUP_COUNT  3
#define OTP_DRV_VCM_SIZE  3
#define bg_ratio_typical 0x400
#define rg_ratio_typical 0x400
struct regval_tab S5K3L2_res_init[] = {
	/* reset */
	{0xFCFC, 0xD000},
	{0x6010, 0x0001},
	/*p3*/
	{SENSOR_MDELAY, SENSOR_MDELAY, 10},
	{0x6214, 0x7970},
	{0x6218, 0x7150},
	{0x6004, 0x0001},
	/* Trap & Patch part
	   SVN Rev : 43535-43535
	*/
	{0x6028, 0x7000},
	{0x602A, 0x2200},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x6810},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x6800},
	{0x6F12, 0x2DE9},
	{0x6F12, 0x1040},
	{0x6F12, 0x80E5},
	{0x6F12, 0x0010},
	{0x6F12, 0x90E5},
	{0x6F12, 0x2C20},
	{0x6F12, 0x42E0},
	{0x6F12, 0x0110},
	{0x6F12, 0xC0E1},
	{0x6F12, 0xB410},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x5410},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x5400},
	{0x6F12, 0x00EB},
	{0x6F12, 0xD100},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x5010},
	{0x6F12, 0xC1E1},
	{0x6F12, 0xB000},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x4C10},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x4C00},
	{0x6F12, 0x00EB},
	{0x6F12, 0xCE00},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x4800},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x4820},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x4810},
	{0x6F12, 0x82E5},
	{0x6F12, 0x1000},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x0000},
	{0x6F12, 0xC1E1},
	{0x6F12, 0xB200},
	{0x6F12, 0xC1E1},
	{0x6F12, 0xB000},
	{0x6F12, 0xC1E1},
	{0x6F12, 0xB400},
	{0x6F12, 0xC1E1},
	{0x6F12, 0xB600},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x3000},
	{0x6F12, 0x82E5},
	{0x6F12, 0x2400},
	{0x6F12, 0xBDE8},
	{0x6F12, 0x1040},
	{0x6F12, 0x2FE1},
	{0x6F12, 0x1EFF},
	{0x6F12, 0x0070},
	{0x6F12, 0x0426},
	{0x6F12, 0x0070},
	{0x6F12, 0x6018},
	{0x6F12, 0x0070},
	{0x6F12, 0xE424},
	{0x6F12, 0x0000},
	{0x6F12, 0xA436},
	{0x6F12, 0x0070},
	{0x6F12, 0xF825},
	{0x6F12, 0x0070},
	{0x6F12, 0x8C24},
	{0x6F12, 0x0000},
	{0x6F12, 0x08C5},
	{0x6F12, 0x0070},
	{0x6F12, 0x3023},
	{0x6F12, 0x0070},
	{0x6F12, 0xF004},
	{0x6F12, 0x0070},
	{0x6F12, 0xFA25},
	{0x6F12, 0x0070},
	{0x6F12, 0x9C22},
	{0x6F12, 0x2DE9},
	{0x6F12, 0x3840},
	{0x6F12, 0x9DE5},
	{0x6F12, 0x1040},
	{0x6F12, 0x8DE5},
	{0x6F12, 0x0040},
	{0x6F12, 0x00EB},
	{0x6F12, 0xB400},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x8402},
	{0x6F12, 0xD4E1},
	{0x6F12, 0xB420},
	{0x6F12, 0x90E5},
	{0x6F12, 0x0030},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x0010},
	{0x6F12, 0x83E0},
	{0x6F12, 0x8101},
	{0x6F12, 0x80E2},
	{0x6F12, 0x250E},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB0C0},
	{0x6F12, 0x5CE1},
	{0x6F12, 0x0200},
	{0x6F12, 0x00CA},
	{0x6F12, 0x1300},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB2C0},
	{0x6F12, 0x5CE1},
	{0x6F12, 0x0200},
	{0x6F12, 0x00BA},
	{0x6F12, 0x1000},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xF450},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xF610},
	{0x6F12, 0x41E0},
	{0x6F12, 0x0530},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB210},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB000},
	{0x6F12, 0x41E0},
	{0x6F12, 0x0010},
	{0x6F12, 0x42E0},
	{0x6F12, 0x0000},
	{0x6F12, 0x00E0},
	{0x6F12, 0x9300},
	{0x6F12, 0x00EB},
	{0x6F12, 0xA100},
	{0x6F12, 0xD4E1},
	{0x6F12, 0xB610},
	{0x6F12, 0x80E0},
	{0x6F12, 0x0500},
	{0x6F12, 0x00E0},
	{0x6F12, 0x9100},
	{0x6F12, 0xA0E1},
	{0x6F12, 0x0003},
	{0x6F12, 0xA0E1},
	{0x6F12, 0x2008},
	{0x6F12, 0xC4E1},
	{0x6F12, 0xB600},
	{0x6F12, 0xBDE8},
	{0x6F12, 0x3840},
	{0x6F12, 0x2FE1},
	{0x6F12, 0x1EFF},
	{0x6F12, 0x81E2},
	{0x6F12, 0x0110},
	{0x6F12, 0x51E3},
	{0x6F12, 0x0500},
	{0x6F12, 0xFF3A},
	{0x6F12, 0xE3FF},
	{0x6F12, 0xFFEA},
	{0x6F12, 0xF9FF},
	{0x6F12, 0x2DE9},
	{0x6F12, 0x7040},
	{0x6F12, 0x9FE5},
	{0x6F12, 0xFC51},
	{0x6F12, 0x95E5},
	{0x6F12, 0x0000},
	{0x6F12, 0x80E2},
	{0x6F12, 0x020C},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB012},
	{0x6F12, 0x51E3},
	{0x6F12, 0x0000},
	{0x6F12, 0x9F15},
	{0x6F12, 0xEC11},
	{0x6F12, 0xD115},
	{0x6F12, 0x0B10},
	{0x6F12, 0x5113},
	{0x6F12, 0x0000},
	{0x6F12, 0x000A},
	{0x6F12, 0x3E00},
	{0x6F12, 0x9FE5},
	{0x6F12, 0xE011},
	{0x6F12, 0xD1E1},
	{0x6F12, 0xB210},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB222},
	{0x6F12, 0x9FE5},
	{0x6F12, 0xD841},
	{0x6F12, 0x51E1},
	{0x6F12, 0x0200},
	{0x6F12, 0xA023},
	{0x6F12, 0x0010},
	{0x6F12, 0xA033},
	{0x6F12, 0x0110},
	{0x6F12, 0xC4E1},
	{0x6F12, 0xB410},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB402},
	{0x6F12, 0x00EB},
	{0x6F12, 0x8300},
	{0x6F12, 0xA0E1},
	{0x6F12, 0x0060},
	{0x6F12, 0x95E5},
	{0x6F12, 0x0000},
	{0x6F12, 0x80E2},
	{0x6F12, 0x020C},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB602},
	{0x6F12, 0x00EB},
	{0x6F12, 0x7E00},
	{0x6F12, 0x9FE5},
	{0x6F12, 0xAC11},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x0120},
	{0x6F12, 0xD1E1},
	{0x6F12, 0xB811},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x0030},
	{0x6F12, 0x51E1},
	{0x6F12, 0x0600},
	{0x6F12, 0xC491},
	{0x6F12, 0xB220},
	{0x6F12, 0x009A},
	{0x6F12, 0x0100},
	{0x6F12, 0x51E1},
	{0x6F12, 0x0000},
	{0x6F12, 0xC481},
	{0x6F12, 0xB230},
	{0x6F12, 0x95E5},
	{0x6F12, 0x0010},
	{0x6F12, 0x91E5},
	{0x6F12, 0x3002},
	{0x6F12, 0x50E3},
	{0x6F12, 0x0000},
	{0x6F12, 0x001A},
	{0x6F12, 0x0B00},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x8D0F},
	{0x6F12, 0x90E1},
	{0x6F12, 0xB1E0},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x7401},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x74C1},
	{0x6F12, 0x5EE3},
	{0x6F12, 0x0000},
	{0x6F12, 0xD001},
	{0x6F12, 0xB0E6},
	{0x6F12, 0xD001},
	{0x6F12, 0xB206},
	{0x6F12, 0xD011},
	{0x6F12, 0xB4E5},
	{0x6F12, 0xD011},
	{0x6F12, 0xB605},
	{0x6F12, 0x8EE1},
	{0x6F12, 0x0008},
	{0x6F12, 0x8C05},
	{0x6F12, 0x2C00},
	{0x6F12, 0x8C15},
	{0x6F12, 0x1800},
	{0x6F12, 0x91E5},
	{0x6F12, 0x2CC2},
	{0x6F12, 0x5CE1},
	{0x6F12, 0x0000},
	{0x6F12, 0xC4D1},
	{0x6F12, 0xB020},
	{0x6F12, 0x00DA},
	{0x6F12, 0x0200},
	{0x6F12, 0x91E5},
	{0x6F12, 0x28C2},
	{0x6F12, 0x5CE1},
	{0x6F12, 0x0000},
	{0x6F12, 0xC4C1},
	{0x6F12, 0xB030},
	{0x6F12, 0xD4E1},
	{0x6F12, 0xB400},
	{0x6F12, 0x50E3},
	{0x6F12, 0x0000},
	{0x6F12, 0xD411},
	{0x6F12, 0xB200},
	{0x6F12, 0x5013},
	{0x6F12, 0x0000},
	{0x6F12, 0xD411},
	{0x6F12, 0xB000},
	{0x6F12, 0x5013},
	{0x6F12, 0x0000},
	{0x6F12, 0x9F15},
	{0x6F12, 0x2001},
	{0x6F12, 0x9011},
	{0x6F12, 0xB100},
	{0x6F12, 0xC411},
	{0x6F12, 0xB600},
	{0x6F12, 0xD4E1},
	{0x6F12, 0xB600},
	{0x6F12, 0x50E3},
	{0x6F12, 0x0000},
	{0x6F12, 0x4012},
	{0x6F12, 0x0100},
	{0x6F12, 0xC411},
	{0x6F12, 0xB600},
	{0x6F12, 0x9F15},
	{0x6F12, 0x0801},
	{0x6F12, 0xC011},
	{0x6F12, 0xB030},
	{0x6F12, 0xC011},
	{0x6F12, 0xB820},
	{0x6F12, 0x00EB},
	{0x6F12, 0x4F00},
	{0x6F12, 0x00EB},
	{0x6F12, 0x5000},
	{0x6F12, 0xA0E1},
	{0x6F12, 0x0040},
	{0x6F12, 0x9FE5},
	{0x6F12, 0xF400},
	{0x6F12, 0x00EB},
	{0x6F12, 0x4F00},
	{0x6F12, 0x54E1},
	{0x6F12, 0x0000},
	{0x6F12, 0x4480},
	{0x6F12, 0x0000},
	{0x6F12, 0xBD88},
	{0x6F12, 0x7040},
	{0x6F12, 0xA081},
	{0x6F12, 0x0018},
	{0x6F12, 0xA081},
	{0x6F12, 0x2118},
	{0x6F12, 0xA083},
	{0x6F12, 0x2100},
	{0x6F12, 0x008A},
	{0x6F12, 0x4A00},
	{0x6F12, 0xBDE8},
	{0x6F12, 0x7040},
	{0x6F12, 0x2FE1},
	{0x6F12, 0x1EFF},
	{0x6F12, 0x2DE9},
	{0x6F12, 0x1040},
	{0x6F12, 0x00EB},
	{0x6F12, 0x4800},
	{0x6F12, 0x50E3},
	{0x6F12, 0x0000},
	{0x6F12, 0x000B},
	{0x6F12, 0x4800},
	{0x6F12, 0x00EA},
	{0x6F12, 0x0100},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x0100},
	{0x6F12, 0x00EB},
	{0x6F12, 0x4700},
	{0x6F12, 0x00EB},
	{0x6F12, 0x4800},
	{0x6F12, 0x50E3},
	{0x6F12, 0x0000},
	{0x6F12, 0xFF0A},
	{0x6F12, 0xFAFF},
	{0x6F12, 0x9FE5},
	{0x6F12, 0xA400},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x0020},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x0810},
	{0x6F12, 0x00EB},
	{0x6F12, 0x4400},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x7000},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x9410},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB020},
	{0x6F12, 0xC1E1},
	{0x6F12, 0xB421},
	{0x6F12, 0xD0E1},
	{0x6F12, 0xB200},
	{0x6F12, 0xC1E1},
	{0x6F12, 0xB801},
	{0x6F12, 0xBDE8},
	{0x6F12, 0x1040},
	{0x6F12, 0x2FE1},
	{0x6F12, 0x1EFF},
	{0x6F12, 0x2DE9},
	{0x6F12, 0x7040},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x7850},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x6840},
	{0x6F12, 0xD5E1},
	{0x6F12, 0xB000},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x0010},
	{0x6F12, 0x00EB},
	{0x6F12, 0x3800},
	{0x6F12, 0xD4E1},
	{0x6F12, 0xB200},
	{0x6F12, 0xD4E5},
	{0x6F12, 0x4210},
	{0x6F12, 0x80E0},
	{0x6F12, 0x0100},
	{0x6F12, 0x00EB},
	{0x6F12, 0x3600},
	{0x6F12, 0xD4E1},
	{0x6F12, 0xB612},
	{0x6F12, 0xC0E3},
	{0x6F12, 0x0100},
	{0x6F12, 0x80E0},
	{0x6F12, 0x0100},
	{0x6F12, 0x9FE5},
	{0x6F12, 0x4C10},
	{0x6F12, 0x81E5},
	{0x6F12, 0x0400},
	{0x6F12, 0xA0E1},
	{0x6F12, 0x0400},
	{0x6F12, 0x00EB},
	{0x6F12, 0x3100},
	{0x6F12, 0xD5E1},
	{0x6F12, 0xB000},
	{0x6F12, 0xBDE8},
	{0x6F12, 0x7040},
	{0x6F12, 0xA0E3},
	{0x6F12, 0x0110},
	{0x6F12, 0x00EA},
	{0x6F12, 0x2900},
	{0x6F12, 0x0070},
	{0x6F12, 0x0000},
	{0x6F12, 0x0070},
	{0x6F12, 0x4005},
	{0x6F12, 0x00D0},
	{0x6F12, 0x00C2},
	{0x6F12, 0x0070},
	{0x6F12, 0xFA25},
	{0x6F12, 0x0070},
	{0x6F12, 0x901F},
	{0x6F12, 0x00D0},
	{0x6F12, 0x0096},
	{0x6F12, 0x0070},
	{0x6F12, 0x801E},
	{0x6F12, 0x0000},
	{0x6F12, 0x3602},
	{0x6F12, 0x00D0},
	{0x6F12, 0x00A6},
	{0x6F12, 0x0070},
	{0x6F12, 0xE018},
	{0x6F12, 0x0000},
	{0x6F12, 0x1662},
	{0x6F12, 0x00D0},
	{0x6F12, 0x0062},
	{0x6F12, 0x0070},
	{0x6F12, 0xF825},
	{0x6F12, 0x0070},
	{0x6F12, 0x0014},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0xD0DD},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x44DD},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0xA0B1},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x7CE4},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x5055},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x9090},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x50B8},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x5C9D},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x1402},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x187F},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x00C0},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x98C4},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x2C4B},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0xDC0C},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0x68DC},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0xFCE5},
	{0x6F12, 0x1FE5},
	{0x6F12, 0x04F0},
	{0x6F12, 0x0000},
	{0x6F12, 0xA436},
	/* APS/Analog setting*/
	{0x6028, 0xD000},
	{0x6004, 0x0000},
	{0x3690, 0x0100},
	{0x369A, 0xF446},
	{0x369C, 0x5176},
	{0x369E, 0x5C76},
	{0x36A0, 0x5C76},
	{0x36AE, 0xF40E},
	{0x36B0, 0x0B00},
	{0x36B2, 0x4B00},
	{0x36B4, 0x4B00},
	{0xF412, 0x0040},
	{0x3664, 0x0BB8},
	{0x35E4, 0x4776},
	{0x3674, 0x0776},
	{0x3672, 0x0520},
	{0x367A, 0x00ED},
	{0x372A, 0x0101},
	{0x3246, 0x0092},
	{0x324A, 0x009C},
	{0x3256, 0x01BD},
	{0x325A, 0x01C7},
	{0x3248, 0x0092},
	{0x324C, 0x009C},
	{0x3258, 0x01B2},
	{0x325C, 0x01BC},
	{0x3792, 0x0000},
	{0x3794, 0x0000},
	{0x3796, 0x0000},
	{0x379A, 0x0000},
	{0x379C, 0x0000},
	{0x379E, 0x0000},
	{0x33DA, 0x00BC},
	{0x33DC, 0x00BC},
	{0x33DE, 0x00BE},
	{0x33E0, 0x00BE},
	{0x33EA, 0x00BC},
	{0x33EC, 0x00BC},
	{0x33EE, 0x00D8},
	{0x33F0, 0x00D8},
	{0x36A2, 0x5176},
	{0x36A4, 0x2F76},
	{0x36A6, 0x2F76},
	{0x36B6, 0x0B00},
	{0x36B8, 0x4B00},
	{0x36BA, 0x4B00},
	{0x3692, 0x0060},
	/*  ISP setting	*/
	{0x0C00, 0x0100},
	{0x0C02, 0x01FF},
	{0x0C04, 0x0400},
	{0x0C06, 0x0438},
	{0x0C08, 0x0200},
	{0x0C0A, 0x03FF},
	{0x0C0C, 0x0415},
	{0x0C0E, 0x045B},
	{0x0C10, 0x0400},
	{0x0C12, 0x07FF},
	{0x0C14, 0x0421},
	{0x0C16, 0x043B},
	{0x0C18, 0x0800},
	{0x0C1A, 0x0FFF},
	{0x0C1C, 0x0423},
	{0x0C1E, 0x043B},
	{0x0C20, 0x1000},
	{0x0C22, 0x1FFF},
	{0x0C24, 0x0426},
	{0x0C26, 0x0426},
	{0x0B80, 0x0001},
	{0x0B86, 0x0020},
	{0x0B84, 0x0020},
	{0x0B82, 0x0003},
	{0x0B8C, 0x000A},
	{0x0B8E, 0x0000},
	{0x0B88, 0x0008},
	{0x0B8A, 0x0000},
	{0x0B96, 0x0005},
	{0x0B94, 0x0001},
	{0x0602, 0x03FF},
	{0x0604, 0x03FF},
	{0x0606, 0x03FF},
	{0x0608, 0x03FF},
	/* BPC Setting */
	{0x0B08, 0x0000},
	{0x3BE0, 0x03DA},
	{0x3BE2, 0x01D6},
	{0x3BE4, 0x01BF},
	{0x3BE6, 0x0001},
	{0x3BE8, 0x0003},
	{0x3BEA, 0x000A},
	{0x3BEC, 0x0022},
	{0x3BEE, 0x000A},
	{0x3BF0, 0x0022},
	{0x3BF2, 0x000A},
	{0x3BF4, 0x0022},
	{0x3BF6, 0x000A},
	{0x3BF8, 0x0022},
	{0x3BFA, 0x0001},
	{0x3BFC, 0x0003},
	{0x3BFE, 0x000A},
	{0x3C00, 0x0022},
	{0x3C02, 0x000A},
	{0x3C04, 0x0022},
	{0x3C06, 0x000A},
	{0x3C08, 0x0022},
	{0x3C0A, 0x000A},
	{0x3C0C, 0x0022},
	{0x3C0E, 0x0200},
	{0x3C10, 0x0200},
	{0x3C12, 0x0002},
	{0x3C14, 0x0003},
	{0x3C16, 0x0008},
	{0x3C18, 0x0018},
	{0x3C1A, 0x0008},
	{0x3C1C, 0x0018},
	{0x3C1E, 0x0008},
	{0x3C20, 0x0018},
	{0x3C22, 0x0008},
	{0x3C24, 0x0018},
	{0x3C26, 0x0002},
	{0x3C28, 0x0003},
	{0x3C2A, 0x0008},
	{0x3C2C, 0x0018},
	{0x3C2E, 0x0008},
	{0x3C30, 0x0018},
	{0x3C32, 0x0008},
	{0x3C34, 0x0018},
	{0x3C36, 0x0008},
	{0x3C38, 0x0018},
	{0x3C3A, 0x0200},
	{0x3C3C, 0x0200},
	{0x3C3E, 0x0002},
	{0x3C40, 0x0003},
	{0x3C42, 0x0014},
	{0x3C44, 0x0040},
	{0x3C46, 0x0014},
	{0x3C48, 0x0040},
	{0x3C4A, 0x0014},
	{0x3C4C, 0x0040},
	{0x3C4E, 0x0014},
	{0x3C50, 0x0040},
	{0x3C52, 0x0002},
	{0x3C54, 0x0003},
	{0x3C56, 0x0014},
	{0x3C58, 0x0040},
	{0x3C5A, 0x0014},
	{0x3C5C, 0x0040},
	{0x3C5E, 0x0014},
	{0x3C60, 0x0040},
	{0x3C62, 0x0014},
	{0x3C64, 0x0040},
	{0x3C66, 0x0200},
	{0x3C68, 0x0200},
	{0x3C6A, 0x0002},
	{0x3C6C, 0x0003},
	{0x3C6E, 0x0008},
	{0x3C70, 0x0018},
	{0x3C72, 0x0008},
	{0x3C74, 0x0018},
	{0x3C76, 0x0008},
	{0x3C78, 0x0018},
	{0x3C7A, 0x0008},
	{0x3C7C, 0x0018},
	{0x3C7E, 0x0002},
	{0x3C80, 0x0003},
	{0x3C82, 0x0008},
	{0x3C84, 0x0018},
	{0x3C86, 0x0008},
	{0x3C88, 0x0018},
	{0x3C8A, 0x0008},
	{0x3C8C, 0x0018},
	{0x3C8E, 0x0008},
	{0x3C90, 0x0018},
	{0x3C92, 0x0200},
	{0x3C94, 0x0200},
	{0x3C96, 0x0002},
	{0x3C98, 0x0003},
	{0x3C9A, 0x0014},
	{0x3C9C, 0x0040},
	{0x3C9E, 0x0014},
	{0x3CA0, 0x0040},
	{0x3CA2, 0x0014},
	{0x3CA4, 0x0040},
	{0x3CA6, 0x0014},
	{0x3CA8, 0x0040},
	{0x3CAA, 0x0002},
	{0x3CAC, 0x0003},
	{0x3CAE, 0x0014},
	{0x3CB0, 0x0040},
	{0x3CB2, 0x0014},
	{0x3CB4, 0x0040},
	{0x3CB6, 0x0014},
	{0x3CB8, 0x0040},
	{0x3CBA, 0x0014},
	{0x3CBC, 0x0040},
	{0x3CBE, 0x0200},
	{0x3CC0, 0x0200},
	{0x3CC2, 0x0002},
	{0x3CC4, 0x0003},
	{0x3CC6, 0x0008},
	{0x3CC8, 0x0018},
	{0x3CCA, 0x0008},
	{0x3CCC, 0x0018},
	{0x3CCE, 0x0008},
	{0x3CD0, 0x0018},
	{0x3CD2, 0x0008},
	{0x3CD4, 0x0018},
	{0x3CD6, 0x0002},
	{0x3CD8, 0x0003},
	{0x3CDA, 0x0008},
	{0x3CDC, 0x0018},
	{0x3CDE, 0x0008},
	{0x3CE0, 0x0018},
	{0x3CE2, 0x0008},
	{0x3CE4, 0x0018},
	{0x3CE6, 0x0008},
	{0x3CE8, 0x0018},
	{0x3CEA, 0x0200},
	{0x3CEC, 0x0200},
	{0x3CEE, 0x0002},
	{0x3CF0, 0x0003},
	{0x3CF2, 0x0014},
	{0x3CF4, 0x0040},
	{0x3CF6, 0x0014},
	{0x3CF8, 0x0040},
	{0x3CFA, 0x0014},
	{0x3CFC, 0x0040},
	{0x3CFE, 0x0014},
	{0x3D00, 0x0040},
	{0x3D02, 0x0002},
	{0x3D04, 0x0003},
	{0x3D06, 0x0014},
	{0x3D08, 0x0040},
	{0x3D0A, 0x0014},
	{0x3D0C, 0x0040},
	{0x3D0E, 0x0014},
	{0x3D10, 0x0040},
	{0x3D12, 0x0014},
	{0x3D14, 0x0040},
	{0x3D16, 0x0200},
	{0x3D18, 0x0200},
	{0x3D1A, 0x0002},
	{0x3D1C, 0x0003},
	{0x3D1E, 0x0008},
	{0x3D20, 0x0018},
	{0x3D22, 0x0008},
	{0x3D24, 0x0018},
	{0x3D26, 0x0008},
	{0x3D28, 0x0018},
	{0x3D2A, 0x0008},
	{0x3D2C, 0x0018},
	{0x3D2E, 0x0002},
	{0x3D30, 0x0003},
	{0x3D32, 0x0008},
	{0x3D34, 0x0018},
	{0x3D36, 0x0008},
	{0x3D38, 0x0018},
	{0x3D3A, 0x0008},
	{0x3D3C, 0x0018},
	{0x3D3E, 0x0008},
	{0x3D40, 0x0018},
	{0x3D42, 0x0200},
	{0x3D44, 0x0200},
	{0x3D46, 0x0002},
	{0x3D48, 0x0003},
	{0x3D4A, 0x0014},
	{0x3D4C, 0x0040},
	{0x3D4E, 0x0014},
	{0x3D50, 0x0040},
	{0x3D52, 0x0014},
	{0x3D54, 0x0040},
	{0x3D56, 0x0014},
	{0x3D58, 0x0040},
	{0x3D5A, 0x0002},
	{0x3D5C, 0x0003},
	{0x3D5E, 0x0014},
	{0x3D60, 0x0040},
	{0x3D62, 0x0014},
	{0x3D64, 0x0040},
	{0x3D66, 0x0014},
	{0x3D68, 0x0040},
	{0x3D6A, 0x0014},
	{0x3D6C, 0x0040},
	{0x3D6E, 0x0200},
	{0x3D70, 0x0200},
	{0x3D72, 0x0002},
	{0x3D74, 0x0003},
	{0x3D76, 0x0008},
	{0x3D78, 0x0018},
	{0x3D7A, 0x0008},
	{0x3D7C, 0x0018},
	{0x3D7E, 0x0008},
	{0x3D80, 0x0018},
	{0x3D82, 0x0008},
	{0x3D84, 0x0018},
	{0x3D86, 0x0002},
	{0x3D88, 0x0003},
	{0x3D8A, 0x0008},
	{0x3D8C, 0x0018},
	{0x3D8E, 0x0008},
	{0x3D90, 0x0018},
	{0x3D92, 0x0008},
	{0x3D94, 0x0018},
	{0x3D96, 0x0008},
	{0x3D98, 0x0018},
	{0x3D9A, 0x0200},
	{0x3D9C, 0x0200},
	{0x3D9E, 0x0F00},
	{0x3DA0, 0x4B00},
	{0x3DA2, 0x8700},
	{0x3DA4, 0xC300},
	{0x3DA6, 0xFF00},
	{0x3DA8, 0x0032},
	{0x3DAA, 0x42FF},
	{0x3DAC, 0x0800},
	{0x3DAE, 0x0001},
	{0x3DB0, 0x0008},
	{0x3DB2, 0x00FF},
	{0x3DB4, 0x0008},
	{0x3DB6, 0x0100},
	{0x3DB8, 0x0100},
	{0x3DBA, 0x0F00},
	/* PLL and etc */
	{0x0136, 0x1A00},
	{0x0300, 0x0002},
	{0x0302, 0x0001},
	{0x0304, 0x0008},
	{0x0306, 0x010A},
	{0x0308, 0x0008},
	{0x030A, 0x0001},
	{0x030C, 0x0008},
	{0x030E, 0x014D},
	{0x35D8, 0x0000},
	{0x303A, 0x02BC},
	{0x0B04, 0x0101},
	{0x38E8, 0x0A01},
	{0x380E, 0x0100},
	{0x0114, 0x0300},
	{0x3026, 0x0010},
	{0x3BD6, 0x1010},
	{0x3BD8, 0x1010},
	{0x3048, 0x0001},
	/* "Full Size 30fps [4:3] RAW10" */
	{0x0104, 0x0100},
	{0x0112, 0x0A0A},
	{0x0500, 0x0000},
	{0x35D8, 0x0000},
	{0x3026, 0x0010},
	{0x3690, 0x0100},
	{0x372C, 0x4848},
	{0x372E, 0x0002},
	{0x3730, 0x1106},
	{0x0306, 0x010A},
	{0x030A, 0x0001},
	{0x030C, 0x0008},
	{0x030E, 0x014D},
	{0x0342, 0x11A0},
	{0x0340, 0x0C76},
	{0x034C, 0x1020},
	{0x034E, 0x0C18},
	{0x0344, 0x002C},
	{0x0346, 0x0011},
	{0x0348, 0x104B},
	{0x034A, 0x0C28},
	{0x0386, 0x0001},
	{0x0900, 0x0011},
	{0x0400, 0x0000},
	{0x0404, 0x0010},
	{0x0104, 0x0000},
};
struct regval_tab S5K3L2_fmt_raw10[] = {
};

struct regval_tab S5K3L2_res_720P[] = {

};
struct regval_tab S5K3L2_res_13M[] = {

};

struct regval_tab S5K3L2_id[] = {
	{0x0000, 0x30c2, 0xffff},
	{0x0002, 0xb101, 0xffff},
};
struct regval_tab  S5K3L2_vts[] = {
	{0x0340, 0x0c76, 0xffff},
};
struct regval_tab  S5K3L2_stream_on[] = {
	{0x0100, 0x0100, 0xff00},
};
struct regval_tab  S5K3L2_stream_off[] = {
	{0x0100, 0x0000, 0xff00},
};
struct regval_tab  S5K3L2_expo[] = {
	{0x0202, 0x00, 0xff},
	{0x0203, 0x10, 0xff},
};
struct regval_tab S5K3L2_frationalexp[] = {
	{0x0200, 0x00, 0xff},
	{0x0201, 0x00, 0xff},
};
struct regval_tab  S5K3L2_ag[] = {
	{0x0204, 0x00, 0xff},
	{0x0205, 0x20, 0xff},
};
struct regval_tab  S5K3L2_dg[] = {
	{0x020E, 0x00, 0xff},
	{0x020F, 0x01, 0xff},
};
struct regval_tab S5K3L2_vflip[] = {
	{0x0100, 0x0000, 0x0002},
};
struct regval_tab S5K3L2_hflip[] = {
	{0x0100, 0x0000, 0x0001},
};
struct b52_sensor_i2c_attr S5K3L2_i2c_attr[] = {
	[0] = {
		.reg_len = I2C_16BIT,
		.val_len = I2C_16BIT,
		.addr = 0x2d,
	},
};
static int ev_bias_offset[] = {
	-0x3C, -0x33, -0x2A, -0x21, -0x18, -0x0C, 0,
	0x0F, 0x1E, 0x2D, 0x3C, 0x4B, 0x5A
};
#define N_S5K3L2_I2C_ATTR ARRAY_SIZE(S5K3L2_i2c_attr)
#define N_S5K3L2_INIT ARRAY_SIZE(S5K3L2_res_init)
#define N_S5K3L2_ID ARRAY_SIZE(S5K3L2_id)
#define N_S5K3L2_FMT_RAW10 ARRAY_SIZE(S5K3L2_fmt_raw10)
#define N_S5K3L2_720P ARRAY_SIZE(S5K3L2_res_720P)
#define N_S5K3L2_13M ARRAY_SIZE(S5K3L2_res_13M)
#define N_S5K3L2_VTS ARRAY_SIZE(S5K3L2_vts)
#define N_S5K3L2_EXPO ARRAY_SIZE(S5K3L2_expo)
#define N_S5K3L2_FRATIONALEXPO ARRAY_SIZE(S5K3L2_frationalexp)
#define N_S5K3L2_AG ARRAY_SIZE(S5K3L2_ag)
#define N_S5K3L2_DG ARRAY_SIZE(S5K3L2_dg)
#define N_S5K3L2_VFLIP ARRAY_SIZE(S5K3L2_vflip)
#define N_S5K3L2_HFLIP ARRAY_SIZE(S5K3L2_hflip)
#define N_S5K3L2_STREAM_ON ARRAY_SIZE(S5K3L2_stream_on)
#define N_S5K3L2_STREAM_OFF ARRAY_SIZE(S5K3L2_stream_off)
struct b52_sensor_mbus_fmt S5K3L2_fmt = {
	.mbus_code	= V4L2_MBUS_FMT_SGRBG10_1X10,
	.colorspace	= V4L2_COLORSPACE_SRGB,
	.regs = {
		.tab = S5K3L2_fmt_raw10,
		.num = N_S5K3L2_FMT_RAW10,
	}
};
struct b52_sensor_resolution S5K3L2_res[] = {
	[0] = {
		 .width = 4128,
		 .height = 3096,
		 .hts = 0x11a0,
		 .min_vts = 0x0c76,
		 .prop = SENSOR_RES_BINING1,
		 .regs = {
			.tab = S5K3L2_res_13M,
			.num = N_S5K3L2_13M,
		},
	},
};
static struct b52_sensor_i2c_attr vcm_attr = {
	.reg_len = I2C_8BIT,
	.val_len = I2C_8BIT,
	.addr = 0x0c,
};
static struct b52_sensor_vcm vcm_dw9806 = {
	.type = VCM_DW9806,
	.attr = &vcm_attr,
};
static struct b52_sensor_module S5K3L2_SSG = {
	.vcm = &vcm_dw9806,
	.id = 0,
};
static int S5K3L2_get_pixelclock(struct v4l2_subdev *sd, u32 *rate, u32 mclk);
static int S5K3L2_get_dphy_desc(struct v4l2_subdev *sd,
			struct csi_dphy_desc *dphy_desc, u32 mclk);
static int S5K3L2_update_otp(struct v4l2_subdev *sd,
				struct b52_sensor_otp *opt);
static int S5K3L2_s_power(struct v4l2_subdev *sd, int on);

struct b52_sensor_spec_ops S5K3L2_ops = {
	.get_pixel_rate = S5K3L2_get_pixelclock,
	.get_dphy_desc = S5K3L2_get_dphy_desc,
	.update_otp = S5K3L2_update_otp,
	.s_power = S5K3L2_s_power,
};
struct b52_sensor_data b52_s5k3l2 = {
	.name = "samsung.s5k3l2",
	.type = SAMSUNG_SENSOR,
	.i2c_attr = S5K3L2_i2c_attr,
	.num_i2c_attr = N_S5K3L2_I2C_ATTR,
	.id = {
		.tab = S5K3L2_id,
		.num = N_S5K3L2_ID,
	},
	.global_setting = {
		.tab = S5K3L2_res_init,
		.num = N_S5K3L2_INIT,
	},
	.mbus_fmt = &S5K3L2_fmt,
	.num_mbus_fmt = 1,
	.res = S5K3L2_res,
	.num_res = 1,
	.streamon = {
		.tab = S5K3L2_stream_on,
		.num = N_S5K3L2_STREAM_ON,
	},
	.streamoff = {
		.tab = S5K3L2_stream_off,
		.num = N_S5K3L2_STREAM_OFF,
	},
	.gain2iso_ratio = {
		.numerator = 100,
		.denominator = 0x10,
	},
	.vts_range = {0x0c76, 0x7fff},
	.gain_range = {
		[B52_SENSOR_AG] = {0x0010, 0x00ff},
		[B52_SENSOR_DG] = {0x0010, 0x0010},
	},
	.expo_range = {0x0004, 0x0c76},
	.frationalexp_range = {0x00000, 0x11a0},
	.focus_range = {0x0010, 0x03ff},
	.vts_reg = {
		.tab = S5K3L2_vts,
		.num = N_S5K3L2_VTS,
	},
	.expo_reg = {
		.tab = S5K3L2_expo,
		.num = N_S5K3L2_EXPO,
	},
	.frationalexp_reg = {
		.tab = S5K3L2_frationalexp,
		.num = N_S5K3L2_FRATIONALEXPO,
	},
	.gain_reg = {
		[B52_SENSOR_AG] = {
			.tab = S5K3L2_ag,
			.num = N_S5K3L2_AG,
		},
		[B52_SENSOR_DG] = {
			.tab = S5K3L2_dg,
			.num = N_S5K3L2_DG,
		},
	},
	.hflip = {
		.tab = S5K3L2_hflip,
		.num = N_S5K3L2_HFLIP,
	},
	.vflip = {
		.tab = S5K3L2_vflip,
		.num = N_S5K3L2_VFLIP,
	},
	.ev_bias_offset = ev_bias_offset,
	.flip_change_phase =  0,
	/* A gain format is 8.5 */
	.gain_shift = 0x00,
	/* A expo format is 2 byte */
	.expo_shift = 0x00,
	.calc_dphy = 0,
	.nr_lane = 4,
	.mipi_clk_bps = 1080250000,
	.ops = &S5K3L2_ops,

	.module = &S5K3L2_SSG,
	.num_module =  1,
	.reset_delay = 10000,
};

#endif
