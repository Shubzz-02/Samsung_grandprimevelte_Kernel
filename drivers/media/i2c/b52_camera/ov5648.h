/* Marvell ISP OV5648 Driver
 *
 * Copyright (C) 2009-2014 Marvell International Ltd.
 *
 * Based on mt9v011 -Micron 1/4-Inch VGA Digital Image OV5648
 *
 * Copyright (c) 2009 Mauro Carvalho Chehab (mchehab@redhat.com)
 * This code is placed under the terms of the GNU General Public License v2
 */

#ifndef	B52_OV5648_H
#define	B52_OV5648_H

#include <media/b52-sensor.h>
#include <media/b52_api.h>
/* raw8_default */
struct regval_tab ov5648_res_init[] = {
	{0x0100, 0x00},
	{0x0103, 0x01},
	{SENSOR_MDELAY, SENSOR_MDELAY, 5},
	{0x3001, 0x00},
	{0x3002, 0x00},
	{0x3011, 0x02},
	{0x3017, 0x05},
	{0x3018, 0x4c},
	{0x301c, 0xd2},
	{0x3022, 0x00},
	{0x3034, 0x1a},
	{0x3035, 0x21},
	{0x3036, 0x61}, /*61 for 26Mhz input clk, 69 for 24Mhz input clk*/
	{0x3037, 0x03},
	{0x3038, 0x00},
	{0x3039, 0x00},
	{0x303a, 0x00},
	{0x303b, 0x19},
	{0x303c, 0x11},
	{0x303d, 0x30},
	{0x3105, 0x11},
	{0x3106, 0x05},
	{0x3304, 0x28},
	{0x3305, 0x41},
	{0x3306, 0x30},
	{0x3308, 0x00},
	{0x3309, 0xc8},
	{0x330a, 0x01},
	{0x330b, 0x90},
	{0x330c, 0x02},
	{0x330d, 0x58},
	{0x330e, 0x03},
	{0x330f, 0x20},
	{0x3300, 0x00},
	{0x3500, 0x00},
	{0x3501, 0x3d},
	{0x3502, 0x00},
	{0x3503, 0x07},
	{0x350a, 0x00},
	{0x350b, 0x40},
	{0x3601, 0x33},
	{0x3602, 0x00},
	{0x3611, 0x0e},
	{0x3612, 0x2b},
	{0x3614, 0x50},
	{0x3620, 0x33},
	{0x3622, 0x00},
	{0x3630, 0xad},
	{0x3631, 0x00},
	{0x3632, 0x94},
	{0x3633, 0x17},
	{0x3634, 0x14},
	{0x3704, 0xc0},
	{0x3705, 0x2a},
	{0x3708, 0x66},
	{0x3709, 0x52},
	{0x370b, 0x23},
	{0x370c, 0xcf},
	{0x370d, 0x00},
	{0x370e, 0x00},
	{0x371c, 0x07},
	{0x3739, 0xd2},
	{0x373c, 0x00},
	{0x3800, 0x00},
	{0x3801, 0x00},
	{0x3802, 0x00},
	{0x3803, 0x00},
	{0x3804, 0x0a},
	{0x3805, 0x3f},
	{0x3806, 0x07},
	{0x3807, 0xa3},
	{0x3808, 0x05},
	{0x3809, 0x10},
	{0x380a, 0x03},
	{0x380b, 0xcc},
	{0x380c, 0x0b},
	{0x380d, 0x00},
	{0x380e, 0x03},
	{0x380f, 0xe0},
	{0x3810, 0x00},
	{0x3811, 0x08},
	{0x3812, 0x00},
	{0x3813, 0x04},
	{0x3814, 0x31},
	{0x3815, 0x31},
	{0x3817, 0x00},
	{0x3820, 0x08},
	{0x3821, 0x07},
	{0x3826, 0x03},
	{0x3829, 0x00},
	{0x382b, 0x0b},
	{0x3830, 0x00},
	{0x3836, 0x00},
	{0x3837, 0x00},
	{0x3838, 0x00},
	{0x3839, 0x04},
	{0x383a, 0x00},
	{0x383b, 0x01},
	{0x3b00, 0x00},
	{0x3b02, 0x08},
	{0x3b03, 0x00},
	{0x3b04, 0x04},
	{0x3b05, 0x00},
	{0x3b06, 0x04},
	{0x3b07, 0x08},
	{0x3b08, 0x00},
	{0x3b09, 0x02},
	{0x3b0a, 0x04},
	{0x3b0b, 0x00},
	{0x3b0c, 0x3d},
	{0x3f01, 0x0d},
	{0x3f0f, 0xf5},
	{0x4000, 0x89},
	{0x4001, 0x02},
	{0x4002, 0x45},
	{0x4004, 0x02},
	{0x4005, 0x18},
	{0x4006, 0x08},
	{0x4007, 0x10},
	{0x4008, 0x00},
	{0x4050, 0x6e},
	{0x4051, 0x8f},
	{0x4300, 0xf8},
	{0x4303, 0xff},
	{0x4304, 0x00},
	{0x4307, 0xff},
	{0x4520, 0x00},
	{0x4521, 0x00},
	{0x4511, 0x22},
	{0x4800, 0x24},
	{0x4801, 0x0f},
	{0x4814, 0x2a},
	{0x481f, 0x3c},
	{0x4823, 0x3c},
	{0x4826, 0x00},
	{0x481b, 0x3c},
	{0x4827, 0x32},
	{0x4837, 0x18},
	{0x4b00, 0x06},
	{0x4b01, 0x0a},
	{0x4b04, 0x10},
	{0x5000, 0xff},
	{0x5001, 0x00},
	{0x5002, 0x41},
	{0x5003, 0x0a},
	{0x5004, 0x00},
	{0x5043, 0x00},
	{0x5013, 0x00},
	{0x501f, 0x03},
	{0x503d, 0x00},
	{0x5780, 0xfc},
	{0x5781, 0x1f},
	{0x5782, 0x03},
	{0x5786, 0x20},
	{0x5787, 0x40},
	{0x5788, 0x08},
	{0x5789, 0x08},
	{0x578a, 0x02},
	{0x578b, 0x01},
	{0x578c, 0x01},
	{0x578d, 0x0c},
	{0x578e, 0x02},
	{0x578f, 0x01},
	{0x5790, 0x01},
	{0x5a00, 0x08},
	{0x5b00, 0x01},
	{0x5b01, 0x40},
	{0x5b02, 0x00},
	{0x5b03, 0xf0},
/*add 5M setting*/
	{0x3708, 0x63},
	{0x3709, 0x12},
	{0x370c, 0xcc},
	{0x3800, 0x00},
	{0x3801, 0x00},
	{0x3802, 0x00},
	{0x3803, 0x00},
	{0x3804, 0x0a},
	{0x3805, 0x3f},
	{0x3806, 0x07},
	{0x3807, 0xa3},
	{0x3808, 0x0a},
	{0x3809, 0x20},
	{0x380a, 0x07},
	{0x380b, 0x98},
	{0x380c, 0x0b},
	{0x380d, 0x00},
	{0x380e, 0x07},
	{0x380f, 0xc0},
	{0x3810, 0x00},
	{0x3811, 0x10},
	{0x3812, 0x00},
	{0x3813, 0x06},
	{0x3814, 0x11},
	{0x3815, 0x11},
	{0x3817, 0x00},
	{0x3820, 0x40},
	{0x3821, 0x06},
	{0x4004, 0x04},
	{0x4005, 0x1a},
	{0x350b, 0x40},
	{0x4837, 0x17},
};
struct regval_tab ov5648_fmt_raw8[] = {
};

struct regval_tab ov5648_res_5M[] = {
	{0x0100, 0x00},
	{0x3708, 0x63},
	{0x3709, 0x12},
	{0x370c, 0xcc},
	{0x3800, 0x00},
	{0x3801, 0x00},
	{0x3802, 0x00},
	{0x3803, 0x00},
	{0x3804, 0x0a},
	{0x3805, 0x3f},
	{0x3806, 0x07},
	{0x3807, 0xa3},
	{0x3808, 0x0a},
	{0x3809, 0x20},
	{0x380a, 0x07},
	{0x380b, 0x98},
	{0x380c, 0x0b},
	{0x380d, 0x00},
	{0x380e, 0x07},
	{0x380f, 0xc0},
	{0x3810, 0x00},
	{0x3811, 0x10},
	{0x3812, 0x00},
	{0x3813, 0x06},
	{0x3814, 0x11},
	{0x3815, 0x11},
	{0x3817, 0x00},
	{0x3820, 0x40},
	{0x3821, 0x06},
	{0x4004, 0x04},
	{0x4005, 0x1a},
	{0x350b, 0x40},
	{0x4837, 0x17},
	{0x0100, 0x01},
};
struct regval_tab ov5648_res_quarter_5M[] = {
	{0x0100, 0x00},
	{0x3708, 0x66},
	{0x3709, 0x52},
	{0x370c, 0xcf},
	{0x3800, 0x00},
	{0x3801, 0x00},
	{0x3802, 0x00},
	{0x3803, 0x00},
	{0x3804, 0x0a},
	{0x3805, 0x3f},
	{0x3806, 0x07},
	{0x3807, 0xa3},
	{0x3808, 0x05},
	{0x3809, 0x10},
	{0x380a, 0x03},
	{0x380b, 0xcc},
	{0x380c, 0x0b},
	{0x380d, 0x00},
	{0x380e, 0x03},
	{0x380f, 0xe0},
	{0x3810, 0x00},
	{0x3811, 0x08},
	{0x3812, 0x00},
	{0x3813, 0x04},
	{0x3814, 0x31},
	{0x3815, 0x31},
	{0x3817, 0x00},
	{0x3820, 0x08},
	{0x3821, 0x07},
	{0x4004, 0x02},
	{0x4005, 0x18},
	{0x350b, 0x80},
	{0x4837, 0x17},
	{0x0100, 0x01},
};

struct regval_tab ov5648_id[] = {
	{0x300a, 0x56, 0xff},
	{0x300b, 0x48, 0xff},
};
struct regval_tab ov5648_vts[] = {
};
struct regval_tab ov5648_expo[] = {
	{0x3500, 0x00, 0xff},
	{0x3501, 0x00, 0xff},
	{0x3502, 0x00, 0x0f},
};
struct regval_tab ov5648_ag[] = {
	{0x350a, 0x00, 0xff},
	{0x350b, 0x10, 0xff},
};
struct regval_tab ov5648_af[] = {
};

struct regval_tab ov5648_stream_on[] = {
	{0x0100, 0x01, 0xff},
};
struct regval_tab ov5648_stream_off[] = {
	{0x0100, 0x00, 0xff},
};

struct regval_tab ov5648_vflip[] = {
};
struct regval_tab ov5648_hflip[] = {
};

struct b52_sensor_i2c_attr ov5648_i2c_attr[] = {
	[0] = {
		.reg_len = I2C_16BIT,
		.val_len = I2C_8BIT,
		.addr = 0x36,
	},
};
#define N_OV5648_I2C_ATTR ARRAY_SIZE(ov5648_i2c_attr)
#define N_OV5648_INIT ARRAY_SIZE(ov5648_res_init)
#define N_OV5648_ID ARRAY_SIZE(ov5648_id)
#define N_OV5648_FMT_RAW8 ARRAY_SIZE(ov5648_fmt_raw8)
#define N_OV5648_5M ARRAY_SIZE(ov5648_res_5M)
#define N_OV5648_QUARTER_5M ARRAY_SIZE(ov5648_res_quarter_5M)
#define N_OV5648_VTS ARRAY_SIZE(ov5648_vts)
#define N_OV5648_EXPO ARRAY_SIZE(ov5648_expo)
#define N_OV5648_AG ARRAY_SIZE(ov5648_ag)
#define N_OV5648_AF ARRAY_SIZE(ov5648_af)
#define N_OV5648_STREAM_ON ARRAY_SIZE(ov5648_stream_on)
#define N_OV5648_STREAM_OFF ARRAY_SIZE(ov5648_stream_off)
#define N_OV5648_HFLIP ARRAY_SIZE(ov5648_hflip)
#define N_OV5648_VFLIP ARRAY_SIZE(ov5648_vflip)

struct b52_sensor_mbus_fmt ov5648_fmt = {
	.mbus_code	= V4L2_MBUS_FMT_SBGGR8_1X8,
	.colorspace	= V4L2_COLORSPACE_SRGB,
	.regs = {
		.tab = ov5648_fmt_raw8,
		.num = N_OV5648_FMT_RAW8,
	}
};
struct b52_sensor_resolution ov5648_res[] = {
	[0] = {
		 .width = 2592,
		 .height = 1944,
		 .hts = 0x0b00,
		 .min_vts = 0x07c0,
		 .prop = SENSOR_RES_BINING1,
		 .regs = {
			.tab = ov5648_res_5M,
			.num = N_OV5648_5M,
		},
	},
	[1] = {
		 .width = 1296,
		 .height = 972,
		 .hts = 0x0b00,
		 .min_vts = 0x07c0,
		 .prop = SENSOR_RES_BINING2,
		 .regs = {
			.tab = ov5648_res_quarter_5M,
			.num = N_OV5648_QUARTER_5M,
		},
	},
};

static int OV5648_get_pixelclock(struct v4l2_subdev *sd, u32 *rate, u32 mclk);
static int OV5648_get_dphy_desc(struct v4l2_subdev *sd, struct csi_dphy_desc *dphy_desc, u32 mclk);
static int OV5648_update_otp(struct v4l2_subdev *sd, struct b52_sensor_otp *otp);

struct b52_sensor_spec_ops ov5648_ops = {
	.get_pixel_rate = OV5648_get_pixelclock,
	.get_dphy_desc = OV5648_get_dphy_desc,
	.update_otp = OV5648_update_otp,
};
struct b52_sensor_data b52_ov5648 = {
	.name = "ovt.ov5648",
	.type = OVT_SENSOR,
	.i2c_attr = ov5648_i2c_attr,
	.num_i2c_attr = N_OV5648_I2C_ATTR,
	.id = {
		.tab = ov5648_id,
		.num = N_OV5648_ID,
	},
	.global_setting = {
		.tab = ov5648_res_init,
		.num = N_OV5648_INIT,
	},
	.mbus_fmt = &ov5648_fmt,
	.num_mbus_fmt = 1,
	.res = ov5648_res,
	.num_res = 2,
	.streamon = {
		.tab = ov5648_stream_on,
		.num = N_OV5648_STREAM_ON,
	},
	.streamoff = {
		.tab = ov5648_stream_off,
		.num = N_OV5648_STREAM_OFF,
	},
	.vts_range = {0x0ba0, 0x7fff},
	.gain_range = {
		[B52_SENSOR_AG] = {0x0010, 0x00f8},
		[B52_SENSOR_DG] = {0x0010, 0x0010},
	},
	.expo_range = {0x00010, 0xb90},
	.focus_range = {0x0010, 0x03ff},
	.vts_reg = {
		.tab = ov5648_vts,
		.num = N_OV5648_VTS,
	},
	.expo_reg = {
		.tab = ov5648_expo,
		.num = N_OV5648_EXPO,
	},
	.gain_reg = {
		[B52_SENSOR_AG] = {
			.tab = ov5648_ag,
			.num = N_OV5648_AG,
		},
		[B52_SENSOR_DG] = {
			.tab = NULL,
			.num = 0,
		},
	},
	.af_reg = {
		.tab = ov5648_af,
		.num = N_OV5648_AF,
	},
	.hflip = {
		.tab = ov5648_hflip,
		.num = N_OV5648_HFLIP,
	},
	.vflip = {
		.tab = ov5648_vflip,
		.num = N_OV5648_VFLIP,
	},
	.gain_shift = 0,
	.nr_lane = 2,
	.ops = &ov5648_ops,
};

#endif

