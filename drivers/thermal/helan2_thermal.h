#ifndef __HELAN2_THERMAL_H_
#define __HELAN2_THERMAL_H_

#define NUM_PROFILES_HELAN2 16
#define NUM_ACPP_HELAN2 9

static const short thermalIDDQ1p05TempLimits_helan2[3/*number of prod pts*/][8/*number of temps*/][NUM_PROFILES_HELAN2][4/*number of cores*/] = {
	{{{ 324, 226, 156, 104}, {  -1,  -1,  -1,  -1}, { 324, 226, 156, 104}, { 319, 224, 155, 104}, { 314, 221, 154, 103}, { 294, 207, 143,  95}, { 274, 193, 133,  88}, { 255, 180, 124,  81}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 368, 256, 177, 118}, {  -1,  -1,  -1,  -1}, { 368, 256, 177, 118}, { 362, 254, 176, 118}, { 357, 251, 175, 117}, { 334, 235, 163, 108}, { 311, 219, 152, 100}, { 290, 204, 141,  92}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 418, 291, 202, 134}, {  -1,  -1,  -1,  -1}, { 418, 291, 202, 134}, { 412, 289, 200, 134}, { 406, 286, 199, 133}, { 379, 267, 185, 123}, { 353, 249, 172, 114}, { 329, 232, 160, 105}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 474, 331, 229, 153}, {  -1,  -1,  -1,  -1}, { 474, 331, 229, 153}, { 468, 328, 227, 152}, { 461, 324, 226, 151}, { 430, 303, 210, 140}, { 401, 283, 196, 129}, { 374, 263, 182, 119}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 539, 376, 260, 173}, {  -1,  -1,  -1,  -1}, { 539, 376, 260, 173}, { 531, 372, 258, 173}, { 524, 368, 256, 172}, { 489, 344, 239, 159}, { 456, 321, 222, 147}, { 425, 299, 207, 136}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 612, 427, 296, 197}, {  -1,  -1,  -1,  -1}, { 612, 427, 296, 197}, { 604, 423, 293, 196}, { 595, 419, 291, 195}, { 555, 391, 272, 181}, { 518, 365, 253, 167}, { 483, 340, 235, 154}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 695, 485, 336, 224}, {  -1,  -1,  -1,  -1}, { 695, 485, 336, 224}, { 686, 480, 333, 223}, { 676, 475, 331, 222}, { 631, 444, 308, 205}, { 588, 414, 287, 190}, { 548, 386, 267, 175}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 790, 551, 381, 254}, {  -1,  -1,  -1,  -1}, { 790, 551, 381, 254}, { 779, 546, 379, 253}, { 767, 540, 376, 252}, { 717, 505, 350, 233}, { 668, 471, 326, 216}, { 623, 439, 303, 199}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}},

	{{{ 426, 307, 223, 160}, {  -1,  -1,  -1,  -1}, { 426, 307, 223, 160}, { 420, 305, 222, 159}, { 415, 302, 220, 159}, { 388, 283, 206, 148}, { 363, 265, 193, 138}, { 321, 234, 170, 120}, { 300, 218, 158, 111}, { 279, 203, 147, 103}, {  -1,  -1,  -1,  -1}, { 240, 175, 126,  88}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 484, 349, 253, 182}, {  -1,  -1,  -1,  -1}, { 484, 349, 253, 182}, { 477, 346, 252, 181}, { 471, 343, 250, 181}, { 441, 321, 234, 168}, { 412, 301, 219, 157}, { 365, 266, 193, 136}, { 340, 248, 180, 127}, { 317, 231, 167, 117}, {  -1,  -1,  -1,  -1}, { 273, 199, 144, 100}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 549, 397, 288, 207}, {  -1,  -1,  -1,  -1}, { 549, 397, 288, 207}, { 542, 393, 286, 206}, { 535, 390, 285, 205}, { 501, 365, 266, 191}, { 468, 342, 249, 178}, { 414, 302, 219, 155}, { 387, 282, 204, 144}, { 360, 262, 190, 133}, {  -1,  -1,  -1,  -1}, { 310, 226, 163, 113}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 624, 450, 327, 235}, {  -1,  -1,  -1,  -1}, { 624, 450, 327, 235}, { 616, 447, 325, 234}, { 608, 443, 323, 233}, { 569, 415, 303, 217}, { 532, 388, 283, 203}, { 471, 343, 249, 176}, { 439, 320, 232, 163}, { 409, 298, 215, 151}, {  -1,  -1,  -1,  -1}, { 352, 257, 185, 129}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 709, 512, 371, 267}, {  -1,  -1,  -1,  -1}, { 709, 512, 371, 267}, { 700, 507, 369, 266}, { 690, 503, 367, 265}, { 646, 471, 344, 247}, { 604, 441, 321, 230}, { 535, 390, 282, 200}, { 499, 364, 263, 186}, { 464, 339, 245, 172}, {  -1,  -1,  -1,  -1}, { 400, 292, 211, 146}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 805, 581, 422, 303}, {  -1,  -1,  -1,  -1}, { 805, 581, 422, 303}, { 795, 576, 420, 302}, { 784, 571, 417, 301}, { 734, 535, 391, 281}, { 686, 501, 365, 261}, { 607, 442, 321, 227}, { 567, 413, 299, 211}, { 527, 385, 278, 195}, {  -1,  -1,  -1,  -1}, { 455, 332, 239, 166}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{ 914, 660, 479, 344}, {  -1,  -1,  -1,  -1}, { 914, 660, 479, 344}, { 903, 655, 477, 343}, { 891, 649, 474, 342}, { 834, 608, 444, 319}, { 779, 569, 415, 297}, { 690, 503, 364, 258}, { 644, 469, 340, 240}, { 599, 437, 316, 222}, {  -1,  -1,  -1,  -1}, { 517, 377, 272, 189}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}, 
		{{1039, 750, 545, 391}, {  -1,  -1,  -1,  -1}, {1039, 750, 545, 391}, {1025, 743, 541, 390}, {1012, 737, 538, 388}, { 947, 690, 504, 362}, { 885, 646, 471, 337}, { 784, 571, 414, 293}, { 731, 533, 386, 272}, { 680, 496, 359, 252}, {  -1,  -1,  -1,  -1}, { 587, 429, 309, 215}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}, {  -1,  -1,  -1,  -1}}},

	{{{ 690, 522, 402, 313}, {  -1,  -1,  -1,  -1}, { 690, 522, 402, 313}, { 682, 518, 401, 313}, { 675, 515, 400, 312}, { 602, 460, 356, 277}, { 565, 432, 335, 260}, { 530, 406, 315, 245}, { 496, 381, 295, 229}, { 440, 338, 261, 202}, {  -1,  -1,  -1,  -1}, { 383, 295, 228, 176}, {  -1,  -1,  -1,  -1}, { 351, 272, 211, 163}, {  -1,  -1,  -1,  -1}, { 291, 226, 175, 135}}, 
		{{ 783, 593, 457, 356}, {  -1,  -1,  -1,  -1}, { 783, 593, 457, 356}, { 775, 589, 455, 355}, { 767, 585, 454, 355}, { 684, 522, 404, 315}, { 642, 491, 380, 296}, { 602, 461, 357, 278}, { 564, 433, 336, 261}, { 500, 384, 297, 230}, {  -1,  -1,  -1,  -1}, { 435, 335, 259, 200}, {  -1,  -1,  -1,  -1}, { 398, 308, 239, 185}, {  -1,  -1,  -1,  -1}, { 330, 256, 199, 153}}, 
		{{ 890, 673, 519, 404}, {  -1,  -1,  -1,  -1}, { 890, 673, 519, 404}, { 880, 669, 517, 403}, { 871, 665, 516, 403}, { 777, 593, 459, 358}, { 729, 558, 432, 336}, { 683, 524, 406, 316}, { 640, 492, 381, 296}, { 568, 436, 337, 261}, {  -1,  -1,  -1,  -1}, { 494, 381, 295, 227}, {  -1,  -1,  -1,  -1}, { 452, 350, 272, 210}, {  -1,  -1,  -1,  -1}, { 375, 291, 226, 174}}, 
		{{1011, 765, 590, 459}, {  -1,  -1,  -1,  -1}, {1011, 765, 590, 459}, {1000, 760, 588, 458}, { 989, 755, 586, 458}, { 882, 674, 522, 406}, { 828, 633, 491, 382}, { 776, 595, 461, 359}, { 727, 558, 433, 336}, { 645, 495, 383, 296}, {  -1,  -1,  -1,  -1}, { 561, 432, 335, 258}, {  -1,  -1,  -1,  -1}, { 514, 398, 309, 238}, {  -1,  -1,  -1,  -1}, { 426, 331, 257, 198}}, 
		{{1148, 869, 670, 521}, {  -1,  -1,  -1,  -1}, {1148, 869, 670, 521}, {1136, 863, 668, 521}, {1124, 857, 665, 520}, {1002, 765, 593, 461}, { 940, 719, 558, 434}, { 882, 676, 524, 407}, { 826, 634, 492, 382}, { 732, 562, 435, 336}, {  -1,  -1,  -1,  -1}, { 638, 491, 380, 293}, {  -1,  -1,  -1,  -1}, { 584, 452, 351, 271}, {  -1,  -1,  -1,  -1}, { 484, 376, 292, 224}}, 
		{{1304, 987, 761, 592}, {  -1,  -1,  -1,  -1}, {1304, 987, 761, 592}, {1290, 980, 758, 591}, {1276, 974, 756, 591}, {1138, 869, 673, 524}, {1068, 817, 633, 493}, {1001, 768, 595, 463}, { 938, 721, 559, 434}, { 832, 639, 494, 382}, {  -1,  -1,  -1,  -1}, { 724, 558, 432, 333}, {  -1,  -1,  -1,  -1}, { 663, 514, 399, 308}, {  -1,  -1,  -1,  -1}, { 550, 427, 331, 255}}, 
		{{1481,1121, 864, 672}, {  -1,  -1,  -1,  -1}, {1481,1121, 864, 672}, {1465,1114, 861, 672}, {1450,1106, 858, 671}, {1293, 987, 765, 595}, {1213, 928, 719, 560}, {1138, 872, 676, 526}, {1066, 818, 635, 493}, { 945, 725, 561, 434}, {  -1,  -1,  -1,  -1}, { 823, 634, 491, 379}, {  -1,  -1,  -1,  -1}, { 753, 583, 453, 350}, {  -1,  -1,  -1,  -1}, { 624, 485, 376, 290}}, 
		{{1682,1273, 982, 764}, {  -1,  -1,  -1,  -1}, {1682,1273, 982, 764}, {1664,1265, 978, 763}, {1647,1257, 975, 762}, {1469,1121, 868, 676}, {1378,1054, 817, 636}, {1292, 990, 768, 597}, {1210, 930, 721, 560}, {1073, 824, 638, 493}, {  -1,  -1,  -1,  -1}, { 934, 720, 557, 430}, {  -1,  -1,  -1,  -1}, { 856, 663, 515, 397}, {  -1,  -1,  -1,  -1}, { 709, 551, 428, 329}}} };

static void getThermalLimitsPerPP(unsigned int uiProfile, unsigned int uiIddq1p05, int **ttemp_table)
{
	int iTempIndex,iNumCores, iIddqLimit, iACPP;
	int iProdPtTempLimit[3/*num product points used*/][4/*num cores*/] = {{0}}, tmp;
	char strp[3][10] = {"2.0G", "1.8G", "1.5G"};

	/*
	 * use (NUM_ACPP_HELAN2-1) - ACPP# to index to the correct product point table
	 * iterate through ACPPs that we care about for thermal
	 */
	for (iACPP=8; iACPP>=6; iACPP--)
	{
		/* iterate through num cores */
		for (iNumCores=4; iNumCores>0; iNumCores--)
		{
			/* iterate through temperatures to find the iddq that is greater than our uiSIDD1_05 value for the given number of cores (j) */
			iTempIndex = 0;
			iIddqLimit = thermalIDDQ1p05TempLimits_helan2[NUM_ACPP_HELAN2-1-iACPP][iTempIndex][uiProfile][iNumCores-1];
			iTempIndex++;
			if (iIddqLimit == -1)
			{
				pr_warn("WARNING: SVC and Thermal specs do not support profile%d for ACPP%d(%s)\n", uiProfile, iACPP, strp[NUM_ACPP_HELAN2-1-iACPP]);
				iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][iNumCores-1]=-1;
				continue;
			}
			while ((uiIddq1p05 > iIddqLimit) && (iTempIndex<8))
			{
				iIddqLimit = thermalIDDQ1p05TempLimits_helan2[NUM_ACPP_HELAN2-1-iACPP][iTempIndex][uiProfile][iNumCores-1];
				iTempIndex++;
			}
			/*
			 * now build table of thermal thresholds per core
			 * first handle the case where a safe temperature could not be found in the table (this should never happen)
			 */
			if(8==iTempIndex && uiIddq1p05 > iIddqLimit)
			{
				pr_warn("WARNING: Could not find a safe temperature for %dcore ACPP%d(%s) and therefore it is not supported on this part\n", iNumCores, iACPP, strp[NUM_ACPP_HELAN2-1-iACPP]);
				iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][iNumCores-1]=-1;
			}
			else
				iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][iNumCores-1]=85-(iTempIndex*5);
		}
	}
	pr_info("Thermal limits based on the profile(%d) and Iddq@1.05V(%d) for this part\n", uiProfile, uiIddq1p05);
	pr_info("        4core 3core 2core 1core\n");
	for (iACPP=8; iACPP>=6; iACPP--) {
		tmp = iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][0];
		iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][0] = iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][3];
		iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][3] = tmp;

		tmp = iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][1];
		iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][1] = iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][2];
		iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][2] = tmp;
	}
	for (iACPP=8; iACPP>=6; iACPP--) {
		pr_info("%s%6d%6d%6d%6d\n", strp[NUM_ACPP_HELAN2-1-iACPP], iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][0],
				iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][1],
				iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][2],
				iProdPtTempLimit[NUM_ACPP_HELAN2-1-iACPP][3]);
	}
	memcpy(ttemp_table, iProdPtTempLimit, sizeof(iProdPtTempLimit));
}
#endif
